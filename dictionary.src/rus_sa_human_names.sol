// NAMED ENTRY RECOGNITION - обработка ФИО

// ---------------------------------------------------------------------------------
// Паттерны для распознавания ФИО
// Обратите внимание, что для этих паттернов указывается язык { language=Russian },
// чтобы раскрылись подстановочные цепочки типа \@А
// ---------------------------------------------------------------------------------


// ИМЕНА - обратите внимание, что именем может быть практически любая фонетически
// приемлемая цепочка букв, даже если она в других контекстах является грамматической
// формой существительного:
//
// Синяка удивленно хмыкнул
// ^^^^^^

patterns ФИО_Имя0 { language=Russian } export { node:root_node ПАДЕЖ РОД }


function int IsRuFirstName( tree w )
{
 // Если имя известно системе как существительное, входящее в класс "имён":
 //
 // Отдай его Алисе Селезнёвой!
 //           ^^^^^
 tuple tx = thesaurus_collect( w, <в_класс> );

 if( gt( tuple_count(tx), 0 ) )
  then
  { 
   int n=tuple_count(tx);
   int i;
   for i=0 to arith_minus(n,1)
   {
    tree w2 = tuple_get( tx, i );
    int ie = wordform_entry(w2);
    string ename = entry_name(ie);
	if( eq( ie, wordform_entry( СУЩЕСТВИТЕЛЬНОЕ:ИМЯ{} ) ) )
	 then return 0;
   }
  }
 
 // Предпочитаем существительные в единственном числе
 // Янура ответила слабой улыбкой.
 // ^^^^^
 int id_pos =  wordform_class(w);
 if( eq( id_pos, СУЩЕСТВИТЕЛЬНОЕ ) )
  then
  {
   int numb_state = wordform_get_coord(w,ЧИСЛО);
   if( eq( numb_state, ЧИСЛО:ЕД ) )
    then
    {
     // Если существительное не зарегистрировано как имя,
     // то это должно быть существительное ???, то есть несловарное.
	 int id_entry = wordform_entry(w);
	 if( eq( id_entry, wordform_entry(СУЩЕСТВИТЕЛЬНОЕ:???{}) ) )
	  then return 0;
	  else return -3;
	}
    else return -4;
  }
  
  
 return -6;
}


pattern ФИО_Имя0
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+"){ IsRuFirstName(_) } : export { node:root_node ПАДЕЖ РОД }
}

/*
// Если имя известно системе как существительное, входящее в класс "имён":
//
// Отдай его Алисе Селезнёвой!
//           ^^^^^
pattern ФИО_Имя0
{
 существительное:*{ ОДУШ:ОДУШ <в_класс>СУЩЕСТВИТЕЛЬНОЕ:ИМЯ{} CHARCASING:FirstCapitalized }:export { node:root_node ПАДЕЖ РОД }
} : ngrams { 1 }


// -----------------------------------------------------------------------------
// Слово с большой буквы считаем фамилией или именем, с небольшим штрафом
// Эвристика - женские имена обычно заканчиваются на -а, мужские - на согласную.
// -----------------------------------------------------------------------------

// Янура ответила слабой улыбкой.
// ^^^^^
pattern ФИО_Имя0
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+[аои]"){ [-1]ПАДЕЖ:ИМ [-1]РОД:ЖЕН [-1]ЧИСЛО:ЕД } : export { РОД:ЖЕН ПАДЕЖ:ИМ node:root_node }
} : ngrams { -5 }

// Калинов осторожно обнял жену.
// ^^^^^^^
pattern ФИО_Имя0
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+[\\@бьй]"){ [-1]ПАДЕЖ:ИМ [-1]РОД:МУЖ [-1]ЧИСЛО:ЕД } : export { РОД:МУЖ ПАДЕЖ:ИМ node:root_node }
} : ngrams { -5 }


// Но не всегда можно полагаться на последнюю букву при распознавании рода.
// Поэтому допускаем с дополнительным штрафом и другие варианты

// Синяка растерянно пожал плечами.
// ^^^^^^
pattern ФИО_Имя0
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+[аои]"){ [-1]ПАДЕЖ:ИМ [-1]РОД:МУЖ [-1]ЧИСЛО:ЕД } : export { РОД:МУЖ ПАДЕЖ:ИМ node:root_node }
} : ngrams { -6 }

// Джудиет рассматривала платье.
// ^^^^^^^
pattern ФИО_Имя0
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+[\\@бьй]"){ [-1]ПАДЕЖ:ИМ [-1]РОД:ЖЕН [-1]ЧИСЛО:ЕД } : export { РОД:ЖЕН ПАДЕЖ:ИМ node:root_node }
} : ngrams { -6 }



// Произвольная цепочка букв, начинающаяся с большой буквы.
pattern ФИО_Имя0 export { node:root_node ПАДЕЖ (РОД) }
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+"):export { node:root_node ПАДЕЖ }
} : ngrams { -6 }
*/

// ---------------------------------------------------

patterns ФИО_Имя { language=Russian } export { node:root_node ПАДЕЖ РОД }

pattern ФИО_Имя
{
 ФИО_Имя0 : export { node:root_node ПАДЕЖ РОД }
}


// Валерий-то Николаевич опаздывает!
// ^^^^^^^^^^^^^^^^^^^^^
pattern ФИО_Имя
{
 n=ФИО_Имя0 : export { node:root_node ПАДЕЖ РОД }
 t='-'
 p=частица:то{}
} : links { n.<POSTFIX_PARTICLE>t.<NEXT_COLLOCATION_ITEM>p }


// Валерий же Николаевич снова опоздал.
// ^^^^^^^^^^
pattern ФИО_Имя
{
 n=ФИО_Имя0 : export { node:root_node ПАДЕЖ РОД }
 p=частица:же{}
} : links { n.<POSTFIX_PARTICLE>p }


// не Виктор ли Степанович приходил?
//    ^^^^^^^^^
pattern ФИО_Имя
{
 n=ФИО_Имя0 : export { node:root_node ПАДЕЖ РОД }
 p=частица:ли{}
} : links { n.<POSTFIX_PARTICLE>p }

// -------------------------------------------------------


// -----------------------------------------------

patterns ФИО_Фамилия { language=Russian } export { node:root_node ПАДЕЖ РОД }

// Если слово занесено в лексикон как "существительное" и в тезаурус как "фамилия":
//

function int IsRuLastName( tree w )
{
 // Запрещаем некоторые прилагательные в роли имен:
 // Сам Давид показал девятнадцатый результат
 // ~~~
 int ie0 = wordform_entry(w);
 if( eq( ie0, wordform_entry( ПРИЛАГАТЕЛЬНОЕ:САМ{} ) ) )
  then return -20;    
    
 // Дмитрий Константинов принял присягу
 //         ^^^^^^^^^^^^
 tuple tx = thesaurus_collect( w, <в_класс> );

 if( gt( tuple_count(tx), 0 ) )
  then
  { 
   int n=tuple_count(tx);
   int i;
   for i=0 to arith_minus(n,1)
   {
    tree w2 = tuple_get( tx, i );
    int ie = wordform_entry(w2);
    string ename = entry_name(ie);
	if( eq( ie, wordform_entry( СУЩЕСТВИТЕЛЬНОЕ:ФАМИЛИЯ{} ) ) )
	 then return 0;
   }
  }
 
 // Предпочитаем существительные в единственном числе
 // Встретил Алексея Ворона
 //                  ^^^^^^
 int id_pos =  wordform_class(w);
 if( eq( id_pos, СУЩЕСТВИТЕЛЬНОЕ ) )
  then
  {
   int numb_state = wordform_get_coord(w,ЧИСЛО);
   if( eq( numb_state, ЧИСЛО:ЕД ) )
    then
    {
     // Если существительное не зарегистрировано как имя,
     // то это должно быть существительное ???, то есть несловарное.
	 int id_entry = wordform_entry(w);
  	 if( eq( id_entry, wordform_entry(СУЩЕСТВИТЕЛЬНОЕ:???{}) ) )
	  then return 0;
	  else return -3;
    }
    else return -4;
  }
  
 // Может быть прилагательное 
 // Поговорите с Алексеем Ничипоренковым
 //                       ^^^^^^^^^^^^^^
 if( eq( id_pos, ПРИЛАГАТЕЛЬНОЕ ) )
  then
  {
   int numb_state = wordform_get_coord(w,ЧИСЛО);
   if( eq( numb_state, ЧИСЛО:ЕД ) )
    then return -1;
    else return -4;
  }	  
  
 return -6;
}



/*
// Дмитрий Константинов принял присягу
//         ^^^^^^^^^^^^
pattern ФИО_Фамилия
{
 существительное:*{ ОДУШ:ОДУШ <в_класс>СУЩЕСТВИТЕЛЬНОЕ:ФАМИЛИЯ{} CHARCASING:FirstCapitalized }:export { node:root_node ПАДЕЖ РОД }
} : ngrams { 1 }


// Встретил Алексея Ворона
//                  ^^^^^^
pattern ФИО_Фамилия
{
 существительное:*{ CharCasing:FirstCapitalized } : export { node:root_node ПАДЕЖ РОД }
}

// Поговорите с Алексеем Ничипоренковым
//                       ^^^^^^^^^^^^^^
pattern ФИО_Фамилия
{
 прилагательное:*{ CharCasing:FirstCapitalized } : export { node:root_node ПАДЕЖ РОД }
}


// Джордж Вашингтон был первым президентом США
//        ^^^^^^^^^
pattern ФИО_Фамилия
{
 @and(
      @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+") : export { node:root_node ПАДЕЖ РОД },
	  существительное:*{}
	 ) 
} : ngrams { -3 }



pattern ФИО_Фамилия
{
 @and(
      @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+") : export { node:root_node ПАДЕЖ РОД },
	  unknownentries:*{}
	 ) 
} : ngrams { -2 }


pattern ФИО_Фамилия
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+") : export { node:root_node ПАДЕЖ РОД }
} : ngrams { -5 }
*/


// Джордж Вашингтон был первым президентом США
//        ^^^^^^^^^
pattern ФИО_Фамилия
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+"){ IsRuLastName(_) } : export { node:root_node ПАДЕЖ РОД }
}




// ---------------------------------------------------

patterns ФИО_Отчество { language=Russian } export { node:root_node ПАДЕЖ РОД }

pattern ФИО_Отчество
{
 существительное:*{ CharCasing:FirstCapitalized ОДУШ:ОДУШ } : export { node:root_node ПАДЕЖ РОД }
} : ngrams { 1 }

pattern ФИО_Отчество
{
 @regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+") : export { ПАДЕЖ РОД node:root_node }
} : ngrams { -1 }



// ---------------------------------------------------

patterns ФИО { language=Russian } export { node:root_node ПАДЕЖ РОД }

// А.С.Пушкин
pattern ФИО
{
 @regex_strict("[\\@А\\@Б]\\.[\\@А\\@Б]\\.[\\@А\\@БЙ][\\@а\\@б\\@й]+"):export { node:root_node ПАДЕЖ РОД }
}

// В.Чуров опроверг комментарии о переименовании Волгограда
// ^^^^^^^
pattern ФИО
{
 @regex_strict("[\\@А\\@Б]\\.[\\@А\\@БЙ][\\@а\\@б\\@й]+"):export { node:root_node ПАДЕЖ РОД }
}


// Валерий Иванов сдал экзамены
// ^^^^^^^^^^^^^^
// Экзамены сданы Валерием Ивановым
//                ^^^^^^^^^^^^^^^^^
pattern ФИО
{
 n1=ФИО_Имя : export { node:root_node ПАДЕЖ РОД }
 n2=ФИО_Фамилия{ [-1]=n1:ПАДЕЖ [-1]=n1:РОД }
}
: links { n1.<RIGHT_NAME>n2 }
: ngrams { 1 }


// Имена с римскими цифрами - цари и т.д.:
// Александр II отыскал меня и спросил:
// ^^^^^^^^^^^^
pattern ФИО
{
 n1=ФИО_Имя : export { node:root_node ПАДЕЖ РОД }
 n2=@regex_strict("[IVXML]+")
}
: links { n1.<RIGHT_NAME>n2 }
: ngrams { 1 }


// В разгаре переговоров Людовик XV скончался.
//                       ^^^^^^^^^^
pattern ФИО
{
 n1 = существительное:*{ ОДУШ:ОДУШ <в_класс>СУЩЕСТВИТЕЛЬНОЕ:ИМЯ{} CHARCASING:FirstCapitalized }:export { node:root_node ПАДЕЖ РОД }
 n2=@regex_strict("[IVXML]+")
}
: links { n1.<RIGHT_NAME>n2 }
: ngrams { 2 }


// Позже позвонил мне Беляков Михаил.
//                    ^^^^^^^^^^^^^^
pattern ФИО
{
 n2=ФИО_Фамилия{}
 n1=существительное:*{ ОДУШ:ОДУШ <в_класс>СУЩЕСТВИТЕЛЬНОЕ:ИМЯ{} CHARCASING:FirstCapitalized [-2]=n2:ПАДЕЖ } : export { node:root_node ПАДЕЖ РОД }
}
: links { n1.<RIGHT_NAME>n2 }
: ngrams { 1 }


// Михаил Сергеевич Горбачов был президентом СССР
// ^^^^^^^^^^^^^^^^^^^^^^^^^
pattern ФИО
{
 n1=ФИО_Имя : export { node:root_node ПАДЕЖ РОД }
 n2=ФИО_Фамилия{ [-1]=n1:ПАДЕЖ }
 n3=ФИО_Отчество{ [-1]=n1:ПАДЕЖ }
} : links { n1.<RIGHT_NAME>n2.<RIGHT_NAME>n3 }


// Михаил Сергеевич был президентом СССР
// ^^^^^^^^^^^^^^^^
// Бизнесменом года стал Эдуард Бибер.
//                       ^^^^^^^^^^^^
pattern ФИО
{
 n1=ФИО_Имя : export { node:root_node ПАДЕЖ РОД }
 n3=ФИО_Отчество{ [-1]=n1:ПАДЕЖ [-1]=n1:РОД }
} : links { n1.<RIGHT_NAME>n3 }


// ==============================================================

// К доске вызвали Наташу Петрову.
pattern СущСРодДоп export { РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
{
 ФИО : export { РОД ПАДЕЖ ЧИСЛО:ЕД ОДУШ:ОДУШ node:root_node }
}


pattern СущСРодДоп export { РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
{
 ФИО_Имя : export { РОД ПАДЕЖ ЧИСЛО:ЕД ОДУШ:ОДУШ node:root_node }
} : ngrams { -1 }


// ------------------------------------------------------------------


// Группа существительного с ФИО:
//
// Краткая биография А.С.Пушкина
//         ^^^^^^^^^^^^^^^^^^^^^
pattern СущСРодДоп
{
 n1=ГруппаСущ1:export{ РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
 n2=ФИО{ ПАДЕЖ:РОД }
}
: links { n1.<RIGHT_GENITIVE_OBJECT>n2 }


// Аппозитивная конструкция:
//
// Экс-капитан "Спартака" Дмитрий Аленичев станет тренером
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
pattern СущСРодДоп
{
 n1=ГруппаСущ1{ ОДУШ:ОДУШ ЧИСЛО:ЕД /*<в_класс>СУЩЕСТВИТЕЛЬНОЕ:ПРОФЕССИЯ{}*/ }:export{ РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
 gen=РодОбъект
 n2=ФИО{ =n1:ПАДЕЖ }
}
: links { n1.{ <RIGHT_GENITIVE_OBJECT>gen <CONOUN>n2 } }
: ngrams { 1 }


// Австрийский парашютист Феликс Баумгартнер стал обладателем сразу трех мировых рекордов
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
pattern СущСРодДоп
{
 n1=ГруппаСущ1{ ОДУШ:ОДУШ ЧИСЛО:ЕД /*<в_класс>СУЩЕСТВИТЕЛЬНОЕ:ПРОФЕССИЯ{}*/ }:export{ РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
 n2=ФИО{ =n1:ПАДЕЖ }
}
: links { n1.<CONOUN>n2 }
: ngrams { 1 }



// В некоторых случаях имена могут некорректно распознаваться как неодушевленные:
// Сказка о мирном рыцаре Эддингтоне
//          ^^^^^^^^^^^^^^^^^^^^^^^^
pattern СущСРодДоп
{
 n1=ГруппаСущ1{ одуш:одуш число:ед }:export{ РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
 n2=ФИО{ [-2]=n1:ПАДЕЖ [-2]=n1:РОД } //ФИО_Имя
}
: ngrams { -1 }
: links { n1.<RIGHT_NAME>n2 }

// Строптивого Уолтера Хьюлетта выкинули из совета директоров объединенной компании.
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
pattern СущСРодДоп
{
 a=ГруппаПрил2{ ЧИСЛО:ЕД }
 n=ФИО{ [-2]=a:ПАДЕЖ [-2]=a:РОД }:export{ РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
}
: links { n.<ATTRIBUTE>a }


// ------------------------------------

// предложный паттерн с ФИО:
//
// у А.С.Пушкина
//
// по возможности согласуем по падежу с валентностью предлога:
//
// Он был у Владимира Слепака.
//        ^^^^^^^^^^^^^^^^^^^
pattern ПредлогИСущ
{
 prepos=предлог:*{}:export{ node:prepos node:root_node }
 n=ФИО{ [-2]=prepos:ПАДЕЖ }:export{ node:root_node->n2 }
} : links { prepos.<OBJECT>n }
: ngrams
{
 ВалентностьПредлога(prepos)
}



// -----------------------------------


// А.С.Пушкин - великий поэт
pattern ПредикатСвязка
{
 sbj=ФИО
 v=ДефисКакСвязка : export { node:root_node }
 r=ГруппаСущ4{ ПАДЕЖ:ИМ ЧИСЛО:ЕД }
}:links
{
 v.{
    <SUBJECT>sbj
    <RHEMA>r
   }
}

// -----------------------------------

/*
// ?????
pattern ПодлежащИнв export { (РОД) ЧИСЛО node:root_node }
{
 ФИО:export{ ЧИСЛО:ЕД node:root_node }
}
*/


// ------------------------------------

/*
// ???
// Ты понимаешь, Владимир Сергеевич?
//               ^^^^^^^^^^^^^^^^^^
pattern ПолучательОбращения
{ 
 ФИО{ падеж:им } : export { node:root_node }
}
*/


// ------------------------------------


// Словосочетание из одушевленного существительного и 1-2-3 слов с большой буквы:
//
// Тетя Марина накормила щенка
//      ^^^^^^
// Мы посоветовались с тетей Мариной
//                     ^^^^^^^^^^^^^
// Мы переночуем у дяди Толи
//                 ^^^^^^^^^
// Мы пошли к тете Наташе.
//            ^^^^^^^^^^^
pattern СущОбращение
{
 n=существительное:*{ одуш:одуш число:ед }:export { РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
 n2=ФИО_Имя{ [-1]=n:ПАДЕЖ }
} : links { n.<RIGHT_NAME>n2 }


// студент Иван Петров
// купец Иван Силантьевич Гнездилин
pattern СущОбращение
{
 n=существительное:*{ одуш:одуш число:ед }:export { РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
 n2=ФИО{ [-1]=n:ПАДЕЖ }
} : links { n.<RIGHT_NAME>n2 }


/*
pattern СущОбращение
{
 n=существительное:*{ одуш:одуш число:ед }:export { РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
 n2=@regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+")
 n3=@regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+")
 n4=@regex_strict("[\\@А\\@БЙ][\\@а\\@б\\@й]+")
} : links { n.<RIGHT_NAME>n2.<RIGHT_NAME>n3.<RIGHT_NAME>n4 }
  : ngrams { -1 }
*/

// Императоры Феодор и Христиан
pattern СущОбращение
{
 n=существительное:*{ одуш:одуш число:мн }:export { РОД ПАДЕЖ ЧИСЛО ОДУШ node:root_node }
 n2=ФИО_Имя{ [-1]=n:ПАДЕЖ }
 conj=союз:и{}
 n3=ФИО_Имя{ [-1]=n:ПАДЕЖ }
} : links
{
 n.<RIGHT_NAME>n2.
    <RIGHT_LOGIC_ITEM>conj.
     <RIGHT_NAME>n3
}
  : ngrams { -1 }
